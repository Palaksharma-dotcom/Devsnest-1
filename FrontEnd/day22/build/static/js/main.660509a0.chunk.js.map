{"version":3,"sources":["components/Template.jsx","components/Meme.jsx","components/App.jsx","index.js"],"names":["Template","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","onChange","e","newBoxes","text","target","value","box","index","fetch","then","res","json","data","success","App","setTemplates","useEffect","memes","ReactDOM","render","document","getElementById"],"mappings":"sJAiBeA,EAfE,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAC3B,OACI,qBAAKC,UAAU,YAAf,SAEQF,EAAUG,KAAI,SAACC,GAAD,OACV,qBAAKF,UAAU,WAA6BG,QAAS,kBAAMJ,EAAQG,IAAnE,SACI,qBAAKE,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,MAA4BN,UAAU,WADxCE,EAASK,U,cCsC7CC,MA1Cf,YAAkC,IAAlBC,EAAiB,EAAjBA,KAAMV,EAAW,EAAXA,QAAW,EACLW,mBACpB,CACIC,YAAaF,EAAKF,GAClBK,SAAU,aACVC,SAAU,aACVC,MAAO,KANc,mBACtBC,EADsB,KAChBC,EADgB,KAqB7B,OACI,sBAAKhB,UAAU,OAAf,UACI,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,KACxB,8BAEQ,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAGd,GAAJ,OAC3B,uBACIe,SAAU,SAACC,GACP,IAAMC,EAAWT,EAAKD,MACtBU,EAASjB,GAAM,CAAEkB,KAAMF,EAAEG,OAAOC,OAChCX,EAAQ,2BAAKD,GAAN,IAAYD,MAAOU,OAJtBjB,QASxB,wBAAQJ,QA3BK,WACjB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC2B,EAAKC,GACjBvB,GAAG,iBAAcuB,EAAd,mBAA8BD,EAAIH,SAEzCK,MAAMxB,GACDyB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACCA,EAAKC,SACLpC,EAAQ,2BAAKU,GAAN,IAAYH,IAAK4B,EAAKA,KAAK5B,WAkB1C,2BACA,wBAAQH,QAAS,kBAAMJ,EAAQ,OAA/B,iCChBGqC,MAnBf,WAAgB,IAAD,EACuB1B,mBAAS,IADhC,mBACJZ,EADI,KACOuC,EADP,OAEa3B,mBAAS,MAFtB,mBAEJD,EAFI,KAEEV,EAFF,KAWX,OAPAuC,qBAAU,WACNR,MAAM,qCACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACHG,EAAaH,EAAKA,KAAKK,YAEhC,IAEC,sBAAKvC,UAAU,MAAf,UACI,gDACU,OAATS,EAAgB,cAAC,EAAD,CAAUX,UAAWA,EAAWC,QAASA,IAAc,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QCf/GyC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.660509a0.chunk.js","sourcesContent":["import './App.css';\n\nconst Template = ({ templates, setMeme }) => {\n    return (\n        <div className=\"templates\">\n            {\n                templates.map((template) => (\n                    <div className=\"template\" key={template.id} onClick={() => setMeme(template)}>\n                        <div style={{ backgroundImage: `url(${template.url})` }} className=\"image\">\n                        </div>\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default Template;","import { useState } from \"react\";\n\n// Jt&9Kb7nbk2iWSa\nfunction Meme({ meme, setMeme }) {\n    const [form, setForm] = useState(\n        {\n            template_id: meme.id,\n            username: \"tushar5526\",\n            password: \"qwerty@123\",\n            boxes: [],\n        }\n    )\n    const generateMeme = () => {\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\n        form.boxes.map((box, index) => {\n            url += `&boxes[${index}][text]=${box.text}`;\n        });\n        fetch(url)\n            .then((res) => res.json())\n            .then((data) => {\n                if (data.success)\n                    setMeme({ ...meme, url: data.data.url })\n            })\n    }\n    return (\n        <div className=\"meme\">\n            <img src={meme.url} alt=\"\"></img>\n            <div>\n                {\n                    [...Array(meme.box_count)].map((_, id) => (\n                        <input key={id}\n                            onChange={(e) => {\n                                const newBoxes = form.boxes;\n                                newBoxes[id] = { text: e.target.value };\n                                setForm({ ...form, boxes: newBoxes });\n                            }}></input>\n                    ))\n                }\n            </div>\n            <button onClick={generateMeme}>Generate Meme</button>\n            <button onClick={() => setMeme(null)}>Choose template</button>\n        </div>\n    )\n}\n\nexport default Meme;","import \"./App.css\";\nimport Template from \"./Template\";\nimport Meme from './Meme';\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n    const [templates, setTemplates] = useState([]);\n    const [meme, setMeme] = useState(null);\n\n    useEffect(() => {\n        fetch('https://api.imgflip.com/get_memes')\n            .then((res) => res.json())\n            .then((data) => {\n                setTemplates(data.data.memes);\n            })\n    }, [])\n    return (\n        <div className=\"App\">\n            <h1>Meme Generator</h1>\n            {meme === null ? <Template templates={templates} setMeme={setMeme} /> : <Meme meme={meme} setMeme={setMeme} />}\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}